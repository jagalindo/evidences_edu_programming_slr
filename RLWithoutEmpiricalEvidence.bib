@article{Xinogalos2015,
abstract = {Specially designed programming environments have been used for decades to support the novice programmers learning programming. In this paper, we present various forms of Educational Technology that have guided the design of educational programming environments the last two decades. The design and aspirations of three distinct programming environments developed at the University of Macedonia are presented. These include a Programming Microworld, an Educational Game and a Distributed Pair Programming system. The potential benefits of the different features of the three environments are presented along with results from their evaluation. Conclusions are drawn regarding the technologies incorporated in these different programming environments. Specifically, emphasis is given on technologies and features that seem to be important for motivating and engaging students in learning programming and should be taken into account by researchers designing new educational programming environments.},
author = {Xinogalos, Stelios and Malliarakis, Christos and Tsompanoudi, Despina and Satratzemi, Maya},
doi = {10.1145/2801081.2801094},
file = {:Users/Mac/ownCloud/Mariuxi/TESIS{\_}ALICE/Marzo-2018/Articulos 33/Xinogalos{\_}2015 REV.pdf:pdf},
isbn = {9781450333351},
journal = {ACM International Conference Proceeding Series},
keywords = {Collaboration scripts,Distributed pair programming,Educational games,Novice programmer,Programming microworlds,Structure editors},
title = {{Microworlds, Games and Collaboration: Three effective approaches to support novices in learning programming}},
volume = {02-04-September-2015},
year = {2015}
}
@article{Xie2015,
abstract = {In this chapter, we define and advocate the subfield of educational software engineering (i.e., software engineering for education) within the domain of software engineering research. This subfield develops software engineering technologies (e.g., software testing and analysis [2], software analytics [3,4]) for general educational tasks, going beyond educational tasks for software engineering. For example, general educational tasks can even be on teaching math [5-7]. As an analogy, data mining for software engineering [8] (also called mining software repositories [9]) leverages data mining technologies (which typically come from the data mining community) to address tasks in software engineering, whereas educational software engineering leverages software engineering technologies (which comes usually from the software engineering community) to address tasks in education. In addition, in the solution space, gaming technologies often play an important role together with software engineering technologies.},
author = {Xie, Tao and Tillmann, Nikolai and de Halleux, Jonathan and Bishop, Judith},
doi = {10.1201/b18453},
file = {:Users/Mac/ownCloud/Mariuxi/TESIS{\_}ALICE/Marzo-2018/Articulos 33/Xie{\_}2013 REV.pdf:pdf},
isbn = {9781482226690},
journal = {Computer Games and Software Engineering},
number = {Section V},
pages = {113--132},
title = {{Educational software engineering: Where software engineering, education, and gaming meet}},
year = {2015}
}
@article{Wyeld2018168,
abstract = {There is a movement towards teaching children how to code. This is not a new idea. It has been promoted since the 1980s. It is only very recently, however, that the need to know how to code has become crucial. University-age students need to know how to code to achieve employment after graduation. Post-graduation jobs increasingly require some understanding of how programs work and are developed. Since the early 2000s there has been an increasing demand for graduating students with coding skills. They have attempted to meet this demand by teaching themselves some coding skills (such as for web apps). But, many report they struggle to get past the basics. The tool used in this study immersed students in code in a way that was both fun and leverage existing interests. An online 2D games editor was used for students to learn how to build an app for their mobile device. They interacted directly with the code base and created solutions to problems. Before and after questionnaires showed a shift in sentiment from a fear of coding to a better understanding of code. {\textcopyright} Springer Nature Singapore Pte Ltd. 2018.},
annote = {cited By 0; Conference of 3rd International Conference on Technology in Education, ICTE 2018 ; Conference Date: 9 January 2018 Through 11 January 2018; Conference Code:212959},
author = {Wyeld, T and Nakayama, M},
doi = {10.1007/978-981-13-0008-0_16},
file = {:Users/Mac/ownCloud/Mariuxi/TESIS{\_}ALICE/Marzo-2018/Articulos 33/Wyeld{\_}2018.pdf:pdf},
journal = {Communications in Computer and Information Science},
pages = {168--178},
title = {{The K-12 learn-to-code movement is leaving current graduates behind: Status and a case study}},
url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85045651884{\&}doi=10.1007{\%}2F978-981-13-0008-0{\_}16{\&}partnerID=40{\&}md5=689ae9b4e2c7ea59f6707629294ea928},
volume = {843},
year = {2018}
}
@article{Tung2013,
abstract = {An effective learning activity in a computer programming course is to study and practice computer programs. In order to help students to submit exercises and to assist instructors to mark programming exercises, a number of program submissions and assessment systems have been developed. However, these systems do not provide sufficient support for instructors to design exercises that can help students to study and practice computer programs in an incremental manner. With the primary aim to improve the teaching and learning of computer programming, we have developed a programming exercise management system, namely Programming Learning Web (PLWeb), to assist instructors to design computer programming exercises and to help students to study and practice programming exercises. PLWeb provides an integrated development environment (IDE) which is used not only as an authoring tool for instructors to compose exercises but also as a novice-friendly editor for students to study programs and to submit solutions. In addition, PLWeb allows instructors to use visualized learning status to assist students with difficulties. A plagiarism detection tool is also provided to deter students from plagiarism. {\textcopyright} 2013 ACADEMY PUBLISHER.},
author = {Tung, Sho Huan and Lin, Tsung Te and Lin, Yen Hung},
doi = {10.4304/jsw.8.7.1718-1725},
file = {:Users/Mac/ownCloud/Mariuxi/TESIS{\_}ALICE/Marzo-2018/Articulos 33/Tung{\_}2013 REV.pdf:pdf},
issn = {1796217X},
journal = {Journal of Software},
keywords = {Architectures for educational technology system,Computer science education,Plagiarism detection,Programming exercises design,Programming learning tools},
number = {7},
pages = {1718--1725},
title = {{An exercise management system for teaching programming}},
volume = {8},
year = {2013}
}
@article{Tekdal2013,
abstract = {The purpose of this study was to investigate and compare the effect of the two computer-assisted learning systems named the Example-Based Dynamic Program Visualization Environment (EDPVE) and the Example-Based Static Program Visualization Environment (ESPVE) on undergraduate students' programming skills in an introductory programming course. The study was conducted using a quasi-experimental, non-equivalent control group design with 81 pre-service teachers in a Turkish university. Two classes were randomly assigned to use EDPVE(experimental group) and ESPVE(control group) system. The results of the experiments showed that: (1) there were a significant difference between EDPVE and ESPVE groups in favour of the EDPVE group; and (2) there were no significant difference between male and female students in EDPVE and ESPVE groups respectively. The findings of this study suggest that teaching and learning programming can be improved through the use of dynamic program visualization techniques. {\textcopyright} International Forum of Educational Technology {\&} Society (IFETS).},
author = {Tekdal, Mehmet},
file = {:Users/Mac/ownCloud/Mariuxi/TESIS{\_}ALICE/Marzo-2018/Articulos 33/Tekdal{\_}2013 REV.pdf:pdf},
issn = {11763647},
journal = {Educational Technology and Society},
keywords = {Computer-assisted learning,Gender studies,Interactive learning environments,Program visualization,Programming and programming languages},
number = {3},
pages = {400--410},
title = {{The effect of an example-based dynamic program visualization environment on students' programming skills}},
volume = {16},
year = {2013}
}
@article{Tahboub2015,
abstract = {Advances in geographic information, interactive two-and three-dimensional map visualization accompanied with the proliferation of mobile devices and location data have tremendously benefited the development of geo-educational applications. We demonstrate LIMO; a web-based programming environment that is centered around operations on interactive geographical maps, location-oriented data, and the operations of synthetic objects that move on the maps. LIMO materializes a low-cost open-ended environment that integrates interactive maps and spatial data (e.g., Open-StreetMap). The unique advantage of LIMO is that it relates programming concepts to interactive geographical maps and location data. LIMO offers an environment for students to learn how to program by providing: 1. An easy-to-program library of map and spatial operations, 2. High-quality interactive map graphics, and 3. Example programs that introduce users to writing programs in the LIMO environment.},
author = {Tahboub, Ruby Y. and Shin, Jaewoo and Abdelsalam, Aya and Aref, Jalaleldeen W. and Aref, Walid G. and Prabhakar, Sunil},
doi = {10.1145/2820783.2820796},
file = {:Users/Mac/ownCloud/Mariuxi/TESIS{\_}ALICE/Marzo-2018/Articulos 33/Tahboub{\_}2015 REV.pdf:pdf},
isbn = {9781450339674},
journal = {GIS: Proceedings of the ACM International Symposium on Advances in Geographic Information Systems},
keywords = {Computer programming education,Interactive maps},
pages = {1--4},
title = {{LIMO: Learning programming using interactive map activities}},
volume = {03-06-November-2015},
year = {2015}
}
@article{Su2014,
abstract = {For more than 2 years, Scratch programming has been taught in Taiwanese elementary schools. However, past studies have shown that it is difficult to find appropriate learning methods or tools to boost students' Scratch programming performance. This inability to readily identify tutoring tools has become one of the primary challenges addressed in Scratch programming studies. To cope with this problem, we propose an innovative approach, which combines an Annotation-based Scratch Programming (ASP) tool with the problem-solving-based teaching approach in Scratch programming pedagogy. The ASP tool was developed to enable students to create, review and share Scratch programming and homework annotations. In a quasi-experimental study, we have evaluated Scratch programming pedagogy at a North Taiwanese elementary school to investigate the effects of instructional-tools-supported programming instructional modes on Scratch programming performance. The experimental results show that students who received ASP tool support in conjunction with a problem-solving-based teaching approach performed significantly better than the other groups. Based on our findings, the innovative approach was believed to play an important role in improving the learning patterns of younger pupils. Therefore, we suggest that teachers consider incorporating the innovative method into their teaching environments in order to boost students' learning achievements in the area of Scratch programming and the subsequent learning process. {\textcopyright} 2013 British Educational Research Association.},
author = {Su, Addison Y.S. and Yang, Stephen J.H. and Hwang, Wu Yuin and Huang, Chester S.J. and Tern, Ming Yu},
doi = {10.1111/bjet.12058},
file = {:Users/Mac/ownCloud/Mariuxi/TESIS{\_}ALICE/Marzo-2018/Articulos 33/Su{\_}2014 REV.pdf:pdf},
issn = {14678535},
journal = {British Journal of Educational Technology},
number = {4},
pages = {647--665},
title = {{Investigating the role of computer-supported annotation in problem-solving-based teaching: An empirical study of a Scratch programming pedagogy}},
volume = {45},
year = {2014}
}
@inproceedings{Rao2018,
author = {Rao, A and Bihani, A and Nair, M},
booktitle = {2018 IEEE Symposium on Visual Languages and Human-Centric Computing (VL/HCC)},
doi = {10.1109/VLHCC.2018.8506504},
file = {:Users/Mac/ownCloud/Mariuxi/TESIS{\_}ALICE/Marzo-2018/Articulos 33/Rao{\_}2018.pdf:pdf},
issn = {1943-6106},
keywords = {Data science,Internet,Java,JavaScript,Machine learning,Milo,Programming environments,Programming profession,Tools,Visualization,Web-based visual programming environment,authoring languages,computer science education,data science education,data visualisation,educational courses,graphical blocks,interactive visualizations,learning (artificial intelligence),machine learning,programming environments,programming language,source code,source code (software),undergraduate computer science students,visual programming},
month = {oct},
pages = {211--215},
title = {{Milo: A visual programming environment for Data Science Education}},
year = {2018}
}
@article{Ramirez-Lopez2015,
abstract = {This study investigated the influence of increasing practice and the inclusion of applied examples (exercises with a direct application or related to real problems) during programming and numerical analysis courses. The results obtained from this experiment demonstrated that examples related to students engineering careers have a very positive impact on learning and awaked up the student interest on programming courses; in comparison with students who just follow examples from a textbook as in an ordinary course. The conclusions of this work were obtained from the analysis and comparison of the statistical information of the students' performance during 2 programming courses and an additional mathematical course (numerical analysis). Finally, a questionnaire (at the end of the courses) about the methods used for teaching was applied in order to investigate students' opinion.},
author = {Ramirez-Lopez, A. and Mu{\~{n}}oz, D.F.},
doi = {10.1016/j.sbspro.2015.01.510},
file = {:Users/Mac/ownCloud/Mariuxi/TESIS{\_}ALICE/Marzo-2018/Articulos 33/Ramirez{\_}2015 REV.pdf:pdf},
issn = {18770428},
journal = {Procedia - Social and Behavioral Sciences},
keywords = {increasing practical lessons,learning strategies,programming courses,real-life examples,teaching},
pages = {552--564},
publisher = {Elsevier B.V.},
title = {{Increasing Practical Lessons and Inclusion of Applied Examples to Motivate University Students during Programming Courses}},
volume = {176},
year = {2015}
}
@article{Pullan2013,
abstract = {Java Programming Laboratory (JPL) is a cloud based, integrated learning environment used for teaching introductory Java programming at Griffith University, Australia. JPL incorporates a number of features found in other successful programming learning environments and builds upon them with a range of innovative features. Learning to program is a threshold concept area for ICT students and success in this endeavour is paramount for student progression and retention. JPL provides a database that tracks individual students' successes and progression through scaffolded programming exercises and assessment items and gives students immediate feedback on their use of programming language syntax and correctness of problem solutions. A data querying and visualisation facility allows analysis of the database to provide real-time performance indicators from the overall course / problem level down to the individual student / specific problem level. Programming instructors and curriculum designers will find that this facility allows a responsive approach to student engagement, assistance and progression; as well as course problem tuning in a just-in-time manner. {\textcopyright} 2013 IEEE.},
author = {Pullan, Wayne and Drew, Steven and Tucker, Steven},
doi = {10.1109/ICeLeTE.2013.6644352},
file = {:Users/Mac/ownCloud/Mariuxi/TESIS{\_}ALICE/Marzo-2018/Articulos 33/Pullan{\_}2013 REV.pdf:pdf},
isbn = {9781467350945},
journal = {2013 2nd International Conference on E-Learning and E-Technologies in Education, ICEEE 2013},
keywords = {Java Programming,Problem-Based Learning,RealTime Progress Tracking,Scaffolded Development},
pages = {81--86},
title = {{An integrated approach to teaching introductory programming}},
year = {2013}
}
@article{Papastergiou2009,
abstract = {The aim of this study was to assess the learning effectiveness and motivational appeal of a computer game for learning computer memory concepts, which was designed according to the curricular objectives and the subject matter of the Greek high school Computer Science (CS) curriculum, as compared to a similar application, encompassing identical learning objectives and content but lacking the gaming aspect. The study also investigated potential gender differences in the game's learning effectiveness and motivational appeal. The sample was 88 students, who were randomly assigned to two groups, one of which used the gaming application (Group A, N = 47) and the other one the non-gaming one (Group B, N = 41). A Computer Memory Knowledge Test (CMKT) was used as the pretest and posttest. Students were also observed during the interventions. Furthermore, after the interventions, students' views on the application they had used were elicited through a feedback questionnaire. Data analyses showed that the gaming approach was both more effective in promoting students' knowledge of computer memory concepts and more motivational than the non-gaming approach. Despite boys' greater involvement with, liking of and experience in computer gaming, and their greater initial computer memory knowledge, the learning gains that boys and girls achieved through the use of the game did not differ significantly, and the game was found to be equally motivational for boys and girls. The results suggest that within high school CS, educational computer games can be exploited as effective and motivational learning environments, regardless of students' gender. {\textcopyright} 2008 Elsevier Ltd. All rights reserved.},
author = {Papastergiou, Marina},
doi = {10.1016/j.compedu.2008.06.004},
file = {:Users/Mac/ownCloud/Mariuxi/TESIS{\_}ALICE/Marzo-2018/Articulos 33/Papastergiou{\_}2009 REV.pdf:pdf},
issn = {03601315},
journal = {Computers and Education},
keywords = {Applications in subject areas,Gender studies,Interactive learning environments,Multimedia/hypermedia systems,Secondary education},
number = {1},
pages = {1--12},
publisher = {Elsevier Ltd},
title = {{Digital Game-Based Learning in high school Computer Science education: Impact on educational effectiveness and student motivation}},
url = {http://dx.doi.org/10.1016/j.compedu.2008.06.004},
volume = {52},
year = {2009}
}
@article{Paliokas2013,
abstract = {Mini-languages is a branch of Educational Software for learning programming at an introductory level. On the other hand, participation, interaction and storylines make Educational Games motivating to young learners. The study presented here examined various widely known mini-languages with an emphasis on LOGO implementations and followed a combinational route to take advantage of both Game-Based Learning (GBL) and the use of mini-languages in the design of a new LOGO-like environment. PlayLOGO 3D is a video game with defined learning outcomes aiming to support GBL activities especially designed for children aged 6-13 years in the early stages of programming education. The Expert Review Method was used for initial evaluation based on a set of heuristics for usability, game play and educational effectiveness. Although the expert team found a few violations of heuristics criteria, evaluation results are very encouraging and prove that there is enough room to make programming education more fun. {\textcopyright} 2013 Springer-Verlag Berlin Heidelberg.},
author = {Paliokas, Ioannis and Arapidis, Chistos and Mpimpitsos, Michail},
doi = {10.1007/978-3-642-37042-7-7},
file = {:Users/Mac/ownCloud/Mariuxi/TESIS{\_}ALICE/Marzo-2018/Articulos 33/Paliokas{\_}2013 REV.pdf:pdf},
isbn = {9783642370410},
issn = {03029743},
journal = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
keywords = {Edugames,Game Based Learning,LOGO},
pages = {115--131},
title = {{Game based early programming education: The more you play, the more you learn}},
volume = {7544},
year = {2013}
}
@article{Matthews2015,
abstract = {Computer programming learning requires declarative and procedural knowledge. Novice learners acquire programming declarative knowledge via lectures, tutorials, and self-assessment. Cognitive overload within programming learning materials is one of several learning barriers. Self-assessing is important to assist learners to identify misconceptions and to encourage the correct construction of knowledge. Self-Test Questions (STQ) and solutions in print are common learning methods used in a typical programming learning environment. Comparatively, Self-Assessment Object (SAO) is a type of learning object used to examine usefulness in order to impart declarative knowledge. One hundred and three foundation engineering students, enrolled in a C programming module, took part in this study and were randomly assigned to two groups. A control group used STQ and an experimental group used SAO in a programming lab over seven teaching weeks. Post-test and supporting survey results suggest that SAO was able to support programming learning and mitigate the learning difficulties addressed in this study.},
author = {Matthews, Reginamary and Hin, Hew Soon and Choo, Koo Ah},
doi = {10.1016/j.sbspro.2015.01.466},
file = {:Users/Mac/ownCloud/Mariuxi/TESIS{\_}ALICE/Marzo-2018/Articulos 33/Matthews{\_}2015 REV.pdf:pdf},
isbn = {6060389248152},
issn = {18770428},
journal = {Procedia - Social and Behavioral Sciences},
pages = {236--242},
publisher = {Elsevier B.V.},
title = {{Comparative Study of Self-test Questions and Self-assessment Object for Introductory Programming Lessons}},
volume = {176},
year = {2015}
}
@article{Lee2016125,
annote = {cited By 0},
author = {Lee, J Y and Oh, S Y and Kim, S B},
doi = {10.14257/ijseia.2016.10.9.11},
file = {:Users/Mac/ownCloud/Mariuxi/TESIS{\_}ALICE/Marzo-2018/Articulos 33/Lee{\_}2016 REV.pdf:pdf},
journal = {International Journal of Software Engineering and its Applications},
number = {9},
pages = {125--140},
title = {{Developing a novel pair programming scheme for improving coding skills and learning block instructions of an educational programming language: Entry}},
url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84991383837{\&}doi=10.14257{\%}2Fijseia.2016.10.9.11{\&}partnerID=40{\&}md5=74e3c4dc22b4e1598ded85f2c93636ea},
volume = {10},
year = {2016}
}
@article{Lee2013,
abstract = {The dramatically changing availability and sharing of information online has created new opportunities for informal, discretionary learning. This, along with the rise in online gaming across all ages and genders, gives rise to questions about how these resources can be used effectively for teaching. In my work, I examine the efficacy of an online debugging game designed to teach computer programming. More specifically, in addition to developing the game and its learning objectives, I investigate how the inclusion of new features and the manipulation of specific elements within the game affects people's motivation and learning of computer programming and debugging concepts. Copyright {\textcopyright} 2013 ACM.},
author = {Lee, Michael J.},
doi = {10.1145/2493394.2493424},
file = {:Users/Mac/ownCloud/Mariuxi/TESIS{\_}ALICE/Marzo-2018/Articulos 33/Lee{\_}2013.pdf:pdf},
isbn = {9781450322430},
journal = {ICER 2013 - Proceedings of the 2013 ACM Conference on International Computing Education Research},
keywords = {Assessment,Debugging,Educational game.,Efficiency,Engagement,Programming,Serious game},
pages = {181--182},
title = {{How can a social debugging game effectively teach computer programming concepts?}},
year = {2013}
}
@article{Lee2011,
abstract = {Many novice programmers view programming tools as all-knowing, infallible authorities about what is right and wrong about code. This misconception is particularly detrimental to beginners, who may view the cold, terse, and often judgmental errors from compilers as a sign of personal failure. It is possible, however, that attributing this failure to the computer, rather than the learner, may improve learners' motivation to program. To test this hypothesis, we present Gidget, a game where the eponymous robot protagonist is cast as a fallible character that blames itself for not being able to correctly write code to complete its missions. Players learn programming by working with Gidget to debug its problematic code. In a two-condition controlled experiment, we manipulated Gidget's level of personification in: communication style, sound effects, and image. We tested our game with 116 self-described novice programmers recruited on Amazon's Mechanical Turk and found that, when given the option to quit at any time, those in the experimental condition (with a personable Gidget) completed significantly more levels in a similar amount of time. Participants in the control and experimental groups played the game for an average time of 39.4 minutes (SD=34.3) and 50.1 minutes (SD=42.6) respectively. These finding suggest that how programming tool feedback is portrayed to learners can have a significant impact on motivation to program and learning success. {\textcopyright} 2011 ACM.},
author = {Lee, Michael J. and Ko, Andrew J.},
doi = {10.1145/2016911.2016934},
file = {:Users/Mac/ownCloud/Mariuxi/TESIS{\_}ALICE/Marzo-2018/Articulos 33/Lee{\_}2011 REV.pdf:pdf},
isbn = {9781450308298},
journal = {ICER'11 - Proceedings of the ACM SIGCSE 2011 International Computing Education Research Workshop},
keywords = {debugging,education,motivation,personification,programming},
pages = {109--116},
title = {{Personifying programming tool feedback improves novice programmers' learning}},
year = {2011}
}
@article{Kurihara2015287,
abstract = {Abstract Visual block-based programming is useful for various users such as novice programmers because it provides easy operations and improves the readability of programs. Also, in programming education, it is known to be effective to initially present basic language features and then gradually make more advanced features available. However, the cost of implementing such visual block-based languages remains a challenge. In this paper, we present a programming environment for providing visual block-based domain- specific languages (visual DSLs) that are translatable into various programming languages. In our environment, programs are built by combining visual blocks expressed in a natural language. Blocks represent program elements such as operations and variables. Tips represent snippets, and macro blocks represent procedures. Using Tips and macros make code more abstract, and reduce the number of blocks in code. Visual {\{}DSLs{\}} can be a front-end for various languages. It can be easily restricted and extended by adding and deleting blocks. We applied our programming environment to Processing, an educational programming language for media art. We show that the environment is useful for novice programmers who learn basic concepts of programming and the features of Processing.},
annote = {Proceedings of the 2015 International Conference on Soft Computing and Software Engineering (SCSE'15)},
author = {Kurihara, Azusa and Sasaki, Akira and Wakita, Ken and Hosobe, Hiroshi},
doi = {http://dx.doi.org/10.1016/j.procs.2015.08.452},
file = {:Users/Mac/Library/Application Support/Mendeley Desktop/Downloaded/Kurihara et al. - 2015 - A Programming Environment for Visual Block-Based Domain-Specific Languages.pdf:pdf},
issn = {1877-0509},
journal = {Procedia Computer Science},
keywords = {Domain-Specific Language,Programming Environment,Visual Programming},
pages = {287--296},
title = {{A Programming Environment for Visual Block-Based Domain-Specific Languages}},
url = {http://www.sciencedirect.com/science/article/pii/S1877050915025879},
volume = {62},
year = {2015}
}
@article{Kordaki2012,
abstract = {This study presents a set of categories of learning activities which could be performed by the students using the tools of the wellknown educational software Scratch (www.scratch.mit.edu) that is dedicated for the learning of programming by novices. Specifically, eleven categories of learning activities that could be performed within Scratch were formed, namely: (a) Free creative activities, (b) Solving a specific problem, {\textcopyright} Multiple solution tasks, (d) Experimentation within working Scratch projects, (e) Modification of working Scratch projects, (f) Working on a complete Scratch output and a correct but incomplete part of its code, (g) Working on a complete Scratch output and a mixed form of its code, (h) Working with a complete Scratch output and an incorrect part of its code, (i) Working with the complete code of a Scratch program and predicting its output, (j) Black-box activities, and (k) Collaborative learning activities. Computing teachers can use these categories of activities in their attempts to design appropriate every day classroom settings for the learning of programming by novices within Scratch.},
author = {Kordaki, Maria},
doi = {10.1016/j.sbspro.2012.05.267},
file = {:Users/Mac/ownCloud/Mariuxi/TESIS{\_}ALICE/Marzo-2018/Articulos 33/Kordaki{\_}2012 REV.pdf:pdf},
issn = {18770428},
journal = {Procedia - Social and Behavioral Sciences},
keywords = {2012 published by elsevier,Programming,Scratch,activities,by -nc-nd license,dr,h{\"{u}}seyin uzunboylu,ltd,novices,open access under cc,or peer review under,programming,responsibility of prof,scratch,selection and},
pages = {1162--1166},
title = {{Diverse Categories of Programming Learning Activities could be Performed within Scratch}},
url = {http://dx.doi.org/10.1016/j.sbspro.2012.05.267},
volume = {46},
year = {2012}
}
@article{Kiss2017,
abstract = {Applied informatics engineering students of the undergraduate course Programming I get acquainted with the basic programming knowledge (structured programming) in C. Our earlier personal experiences in Higher Education showed that the majority of the students can not acquire the algorithmic thinking by following the traditional teaching process and they do not have too much chance to pass it. Our starting hypothesis was that the group where the students followed the game oriented exercises would achieve better results in the papers. After the semester we collected the paper results by groups and we tried to analyze whether this method was helpful or not for the students. The traditional way to teach programming for applied informatics engineering students was not so successful than the game-based examples. The students were more motivated to write game programs and more students could pass the test. It means by same learning material and test exercises the student who learned programming in game-based method could get more than one mark better paper results and pass the test in higher percent.},
author = {Kiss, Gabor and Arki, Zuzanna},
doi = {10.1016/j.sbspro.2017.02.020},
file = {:Users/Mac/ownCloud/Mariuxi/TESIS{\_}ALICE/Marzo-2018/Articulos 33/Kiss{\_}2017 REV.pdf:pdf},
issn = {18770428},
journal = {Procedia - Social and Behavioral Sciences},
keywords = {education,game-based,oriented,programming,teaching},
number = {June 2016},
pages = {613--617},
publisher = {The Author(s)},
title = {{The Influence of Game-based Programming Education on the Algorithmic Thinking}},
url = {http://dx.doi.org/10.1016/j.sbspro.2017.02.020},
volume = {237},
year = {2017}
}
@article{John2015,
abstract = {The growth of mobile technologies was evolutionary in the progression of technology, it opened a revolution in computing in a quicker time frame. The easy availability and extreme mobility with rich set of applications made smartphones an inevitable tool for students. This is the high time for academic domain to go for innovative teaching practices with the inclusion of mobile technologies to bridge the gap between academia and industry in a considerable manner. This paper is aimed to introduce an innovative approach of learning computer programming on smartphone platform. The proposed approach intends to introduce a new pedagogy of teaching programming on a platform by developing applications instead of teaching a programming language for creating applications. The main premise of this practice is the introduction of a tailored module to teach Java programming language while developing apps for a leading mobile platform-Android. The proposed module can be an appropriate alternative for the module ‘Introduction to programming' of computer science curriculum across the globe. Pilot implementation has been done in one of the premier higher education centres of Gulf Council Country (GCC). An ontology based implementation of the proposed module ensures its consistency in delivery and the future work will focus more in this direction.},
author = {John, Mr. Santhosh and Rani, Mary Shanthi},
doi = {10.1016/j.sbspro.2015.01.541},
file = {:Users/Mac/ownCloud/Mariuxi/TESIS{\_}ALICE/Marzo-2018/Articulos 33/John{\_}2015 REV.pdf:pdf},
isbn = {9145124523},
issn = {18770428},
journal = {Procedia - Social and Behavioral Sciences},
pages = {787--794},
publisher = {Elsevier B.V.},
title = {{Teaching Java Programming on Smartphone-pedagogy and Innovation; Proposal of its Ontology Oriented Implementation}},
volume = {176},
year = {2015}
}
@article{Hwang2012,
abstract = {In this study we proposed a web-based programming assisted system for cooperation (WPASC) and we also designed one learning activity for facilitating students' cooperative programming learning. The aim of this study was to investigate cooperative programming learning behavior of students and its relationship with learning performance. Students' opinions and perceptions toward learning activity and the WPASC were also investigated. The results of this study revealed that most of students perceived that learning activity and the WPASC were useful for cooperative programming learning. Students' learning behavior during cooperative programming learning activity was classified into six different categories and we found that learning behavior has relationship with learning performance. Students from completely independent, self-improving using assistance, confident after enlightenment and imitating categories performed well due to their effective and motivated learning behavior. However, students from performing poorly without assistance and plagiarizing categories performed the worse; the former could not get assistance at all and the later had no learning motivation. The results also showed that students' learning behavior may have increasing, decreasing and no transition during problems solving. Therefore, performing poorly without assistance and plagiarizing learning behavior and decreasing transition or no transition in learning behavior should be identified right after completing a programming problem. Then the instructor should intervene into learning behavior in order to change it into more effective for learning. Besides, more incentives need to be given for increasing students' learning motivation and posting solutions and feedback by students at the early stage of a problem solving period. {\textcopyright} 2012 Elsevier Ltd. All rights reserved.},
author = {Hwang, Wu Yuin and Shadiev, Rustam and Wang, Chin Yu and Huang, Zhi Hua},
doi = {10.1016/j.compedu.2011.12.009},
file = {:Users/Mac/ownCloud/Mariuxi/TESIS{\_}ALICE/Marzo-2018/Articulos 33/Hwang{\_}2012 REV.pdf:pdf},
issn = {03601315},
journal = {Computers and Education},
keywords = {Cooperative/collaborative learning,Distributed learning environments,Interactive learning environments,Pedagogical issues,Programming and programming languages},
number = {4},
pages = {1267--1281},
publisher = {Elsevier Ltd},
title = {{A pilot study of cooperative programming learning behavior and its relationship with students' learning performance}},
volume = {58},
year = {2012}
}
@article{Hamdi2016,
abstract = {This article presents an ongoing research project on the development of e-content in relation to the cognitive theory of multimedia learning. Previously, a literature review has been conducted on e-content development models, the cognitive theory of multimedia learning, and the problems encountered while learning computer programming. In this work a new framework is proposed for the development of e-content. An experiment was conducted in the Jubilee Centre for Excellence in Education among (98) secondary school studentsin order to assess the value of a Proposed Framework that uses the Cognitive Theory of Media Learning. The study sample was divided into two groups, One group studied computer programmingusing e-content Based on the Behavior Change Techniques using the Proposed Framework (BPF), and the other group studied computer programming based on e-content that was Not Based on the Proposed Framework (NBPF). The students' performance was assessed by a pre-test grading scale and a post-test and an analysis made using Statistical Package for the Social Sciences (SPSS). The results showed that the students who studied computer programming through BPF achieved better scores than the students who studied computer programming through NBPF. Therefore, applying the cognitive theory of multimedia learning properly at the same conditions, as applied in this study in the educational process will significantly reduce the cognitive overload associated with learning through multimedia elements and improve student achievement.},
author = {Hamdi, Meysun and Hamtini, Thair},
doi = {10.3991/ijet.v11i04.5574},
file = {:Users/Mac/ownCloud/Mariuxi/TESIS{\_}ALICE/Marzo-2018/Articulos 33/Hamdi{\_}2016 REV.pdf:pdf},
issn = {18630383},
journal = {International Journal of Emerging Technologies in Learning},
keywords = {Cognitive theory of multimedia learning,E-content development,Educational design,Educational technology,Learning programming},
number = {4},
pages = {131--141},
title = {{Designing an effective e-content development framework for the enhancement of learning programming}},
volume = {11},
year = {2016}
}
@article{Eagle:2008:WCT:1597849.1384337,
address = {New York, NY, USA},
annote = {El juego proporciona retroalimentaci{\'{o}}n inmediata y ayuda a los estudiantes a visualizar la ejecuci{\'{o}}n de su c{\'{o}}digo en un entorno seguro. Hemos probado el juego en un curso de CS1, donde los estudiantes podr{\'{i}}an ganar un cr{\'{e}}dito extra para jugar el Castillo de Wu. Nuestros resultados muestran ganancias de aprendizaje para los jugadores del juego, comparadas tanto a trav{\'{e}}s de las diferencias previas y posteriores a las pruebas y el mejor desempe{\~{n}}o en las preguntas relevantes del examen final en comparaci{\'{o}}n con los estudiantes que no jugaron el juego

No encontr{\'{e}} el dise{\~{n}}o del experimento
Utilizan un juego para ense{\~{n}}ar computacion},
author = {Eagle, Michael and Barnes, Tiffany},
doi = {10.1145/1597849.1384337},
file = {:Users/Mac/Library/Application Support/Mendeley Desktop/Downloaded/Eagle, Barnes - 2008 - Wu's Castle Teaching Arrays and Loops in a Game.pdf:pdf},
issn = {0097-8418},
journal = {SIGCSE Bull.},
keywords = {CS1 education,Game2Learn,arrays,games,iteration},
number = {3},
pages = {245--249},
publisher = {ACM},
title = {{Wu's Castle: Teaching Arrays and Loops in a Game}},
url = {http://0-doi.acm.org.fama.us.es/10.1145/1597849.1384337},
volume = {40},
year = {2008}
}
@article{DeVane2008,
abstract = {This paper connects the conclusions of recent research on video games and learning to prior research on problem schemata and problem-solving. This study examines the problem-solving practices of expert and novice young players of Civilization III in a game-based learning program, and concludes that the problem schemata framework has power and utility in analyzing problem-solving in game-based environments.},
author = {DeVane, Ben and Durga, Shree},
file = {:Users/Mac/ownCloud/Mariuxi/TESIS{\_}ALICE/Marzo-2018/Articulos 33/Devane{\_}2008 REV.pdf:pdf},
issn = {15734552},
journal = {Computer-Supported Collaborative Learning Conference, CSCL},
number = {PART 3},
pages = {20--22},
title = {{Problem-solving in history: Strategy games and schema}},
year = {2008}
}
@article{Costa2017,
abstract = {This paper presents the results of a systematic review of the literature, including a meta-analysis, about the effectiveness of the use of Alice software in programming learning when compared to the use of a conventional programming language. Our research included studies published between the years 2000 and 2014 in the main databases. We gathered 232 papers. Taking into account the selection criteria to make the meta-analysis, we retained six papers with a quasi-experimental design, with 464 participants in total. To combine the results we used the random effect model. It resulted in an effect size of 0.54 (Cohen's d) with a confidence interval between 0.34 and 0.74. We concluded that until now there have been few experimental results on the effectiveness of Alice programming language to introduce students in learning how to program. The results we found were the expression of different experimental treatments and distinguished teaching methods which made the comparison of the results obtained more subtle. However, the existing experimental results that were submitted to the meta-analysis allowed us to assume with a certain margin of safety that a teaching strategy that uses Alice should obtain more effective results than the use of a conventional programming language.},
author = {Costa, Joana M. and Miranda, Guilhermina L.},
doi = {10.1111/bjet.12496},
file = {:Users/Mac/ownCloud/Mariuxi/TESIS{\_}ALICE/Marzo-2018/Articulos 33/Costa{\_}2016 REV.pdf:pdf},
issn = {14678535},
journal = {British Journal of Educational Technology},
number = {6},
pages = {1464--1474},
title = {{Relation between Alice software and programming learning: A systematic review of the literature and meta-analysis}},
volume = {48},
year = {2017}
}
@article{Cornelius2008,
abstract = {This paper presents a case study of the implementation of a flexible learner-centred programme of study which blends face-to-face and online learning. The programme was developed to be flexible in terms of content and study strategies, whilst remaining within more rigid organisational structures and processes. This paper outlines the programme and presents the model developed for flexible content delivery. The programme has been delivered simultaneously by five tutors to six groups of learners. Tutors drew on varying personal experiences of flexible and online learning and this paper also presents the results of an investigation to explore their experiences of facilitation. The findings provide a unique insight into the implications of such a programme for educators. Data were gathered using methods to promote and structure reflections on practice. Issues of relevance for others considering the development of flexible learner-centred programmes of study are presented. {\textcopyright} 2007 Elsevier Inc. All rights reserved.},
author = {Cornelius, Sarah and Gordon, Carole},
doi = {10.1016/j.iheduc.2007.11.003},
file = {:Users/Mac/ownCloud/Mariuxi/TESIS{\_}ALICE/Marzo-2018/Articulos 33/Cornelius{\_}2008 REV.pdf:pdf},
issn = {10967516},
journal = {Internet and Higher Education},
keywords = {Flexible learning,Learner-centred learning,Online learning,Reflective practice,Tutor role},
number = {1},
pages = {33--41},
title = {{Providing a flexible, learner-centred programme: Challenges for educators}},
volume = {11},
year = {2008}
}
@article{Combefis2013,
abstract = {Attracting pupils from secondary schools (12-18 years old) to learn programming is not easy. It is especially the case in Belgium where there is no or very few programming and algorithm design courses in secondary schools. Another issue is that teachers who are in charge of computer science courses are afraid of teaching a matter they do not feel comfortable with, especially when they are not informatics teachers. This paper presents ILPADS, interactive learning of programming and algorithm design skills, an interactive website which aims at gradually growing algorithmic thinking skills to lead pupils towards the learning of the Python programming language. That website aims to serve as working material to support teachers for their computer science courses in secondary schools. Pupils can also use the website at home to continue learning on their own. The paper presents the interactive website and mainly focuses on the design of the ILPADS activities. Future work includes testing the website in real classrooms and evaluating it. {\textcopyright} 2013 Vilnius University.},
author = {Comb{\'{e}}fis, S{\'{e}}bastien and {Van Den Schrieck}, Virginie and Nootens, Alexis},
file = {:Users/Mac/ownCloud/Mariuxi/TESIS{\_}ALICE/Marzo-2018/Articulos 33/Combefis{\_}2013 REV.pdf:pdf},
isbn = {9771822773007},
issn = {18227732},
journal = {Olympiads in Informatics},
keywords = {Algorithmic thinking,Distance learning,Interactive learning,Learning programming,Teaching},
pages = {3--13},
title = {{Growing algorithmic thinking through interactive problems to encourage learning programming}},
volume = {7},
year = {2013}
}
@article{Blumenstein2008,
abstract = {This paper describes the Generic Automated Marking Environment (GAME) and provides a detailed analysis of its performance in assessing student programming projects and exercises. GAME has been designed to automatically assess programming assignments written in a variety of languages based on the "structure" of the source code and the correctness of the program's output. Currently, the system is able to mark programs written in Java, C++ and the C language. To use the system, instructors are required to provide a simple "marking schema" for each given assessment item, which includes pertinent information such as the location of files and the model solution. In this research, GAME has been tested on a number of student programming exercises and assignments and its performance has been compared against that of a human marker. An in-depth statistical analysis of the comparison is presented, providing encouraging results and directions for employing GAME as a tool for teaching and learning. {\textcopyright} 2006 Elsevier Ltd. All rights reserved.},
author = {Blumenstein, Michael and Green, Steve and Fogelman, Shoshana and Nguyen, Ann and Muthukkumarasamy, Vallipuram},
doi = {10.1016/j.compedu.2006.11.006},
file = {:Users/Mac/ownCloud/Mariuxi/TESIS{\_}ALICE/Marzo-2018/Articulos 33/Blumenstein{\_}2008 REV.pdf:pdf},
issn = {03601315},
journal = {Computers and Education},
keywords = {Architectures for educational technology system,Post-secondary education,Programming and programming languages,Teaching/learning strategies},
number = {4},
pages = {1203--1216},
title = {{Performance analysis of GAME: A generic automated marking environment}},
volume = {50},
year = {2008}
}
@article{Bloch,
author = {Bloch, Stephen},
file = {:Users/Mac/ownCloud/Mariuxi/TESIS{\_}ALICE/Marzo-2018/Articulos 33/Bloch{\_}2010 REV.pdf:pdf},
pages = {218--220},
title = {{ORIENTED PROGRAMMING WITHOUT DROWNING IN}}
}
@article{Biro2015,
abstract = {Students starting their tertiary studies in Informatics are found to have a low level of algorithmic skills and understanding of programming, which leads to the high number of drop out students and failed semesters during their studies. The students' low level of programming skills contrasts with their excellent results in the school leaving exams. To find out the reasons for this we have launched the TAaAS project (Testing Algorithmic and Application Skills), which focuses on the students' algorithmic skills and programming ability in traditional and non-traditional programming environments. Our analyses proved that school leaving exams are not able to measure these abilities of the students, and beyond that, are not able to distinguish between the different levels of the students. Students are accepted into the universities and start their studies based on the misleading results of the school leaving exams.},
author = {Bir{\'{o}}, Piroska and Csernoch, M{\'{a}}ria and M{\'{a}}th, J{\'{a}}nos and Abari, K{\'{a}}lm{\'{a}}n},
doi = {10.1016/j.sbspro.2015.01.553},
file = {:Users/Mac/ownCloud/Mariuxi/TESIS{\_}ALICE/Marzo-2018/Articulos 33/Biro{\_}2015 REV.pdf:pdf},
issn = {18770428},
journal = {Procedia - Social and Behavioral Sciences},
keywords = {algorithmic skills,informatics and mathematics,level of digital thinking,school leaving exams in},
pages = {876--883},
publisher = {Elsevier B.V.},
title = {{Measuring the Level of Algorithmic Skills at the End of Secondary Education in Hungary}},
volume = {176},
year = {2015}
}
@article{Aycock2015,
abstract = {Games are being increasingly used to create compelling assignments for students learning programming, and Python is often used as an initial programming language. To that end, we present a game engine written in pure Python. Not only does the engine integrate seamlessly with what students already know about Python, but the game engine code itself is not a "black box" - it is readable and approachable for beginning students. We report on two years' worth of experience using our game engine in CS1 for both regular assignments as well as "master classes," the engine's design, and its limits.},
author = {Aycock, John and Pitout, Etienne and Storteboom, Sarah},
doi = {10.1145/2729094.2742590},
file = {:Users/Mac/ownCloud/Mariuxi/TESIS{\_}ALICE/Marzo-2018/Articulos 33/Aycock{\_}2015 REV.pdf:pdf},
isbn = {9781450334402},
issn = {1942647X},
journal = {Annual Conference on Innovation and Technology in Computer Science Education, ITiCSE},
keywords = {Education,Game engines,Games,Python,Turtle graphics},
pages = {93--98},
title = {{A game engine in pure python for CS1: Design, experience, and limits}},
volume = {2015-June},
year = {2015}
}
@article{Aref2015,
abstract = {2D maps and 3D globes can be used as programming toys to help students learn programming in contrast to using robots, visual, or multimedia components in Computer Science I introductory programming courses. This paper studies research challenges related to supporting this concept, and presents one instance of a 2D and 3D map-based programming environment to motivate these challenges.},
author = {Aref, Walid G. and Prabhakar, Sunil and Shin, Jaewoo and Tahboub, Ruby Y. and Abdelsalam, Aya and Aref, Jalaleldeen W.},
doi = {10.1145/2820783.2820886},
file = {:Users/Mac/ownCloud/Mariuxi/TESIS{\_}ALICE/Marzo-2018/Articulos 33/Aref{\_}2015 REV.pdf:pdf},
isbn = {9781450339674},
journal = {GIS: Proceedings of the ACM International Symposium on Advances in Geographic Information Systems},
keywords = {Design},
pages = {1--4},
title = {{On map-centric programming environments (vision paper)}},
volume = {03-06-November-2015},
year = {2015}
}
@inproceedings{Atherton:2017:SBB:3078072.3091992,
address = {New York, NY, USA},
author = {Atherton, Jack and Blikstein, Paulo},
booktitle = {Proceedings of the 2017 Conference on Interaction Design and Children},
doi = {10.1145/3078072.3091992},
file = {:Users/Mac/ownCloud/Mariuxi/TESIS{\_}ALICE/Marzo-2018/Articulos 33/Atherton{\_}2017.pdf:pdf},
isbn = {978-1-4503-4921-5},
keywords = {computer science education,constructionism,embodied cognition,music,sonification},
pages = {733--736},
publisher = {ACM},
series = {IDC '17},
title = {{Sonification Blocks: A Block-Based Programming Environment For Embodied Data Sonification}},
url = {http://doi.acm.org/10.1145/3078072.3091992},
year = {2017}
}
