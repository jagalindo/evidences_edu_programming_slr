@article{Yukselturk2017,
abstract = {The purpose of this study was to analyze the effects of programming with Scratch on the views of preservice Information Technology (IT) teachers towards computer programming. The study sample consisted of 151 preservice IT teachers who took an elective course including a Scratch module in the 2013–14 academic year. Three online questionnaires (Personal Information Questionnaire, The Computer Programming Self-Efficacy Scale and The Computer Programming Learning Attitude Scale) were used to gather the quantitative data and focus group interviews were conducted to collect the qualitative data regarding the preservice IT teachers' views in more detail. According to the results, there were significant increases in the mean of the preservice IT teachers' self-efficacy perceptions regarding almost all complex programming tasks after their Scratch programming experience. The results also showed that the preservice IT teachers' negative attitudes towards programming decreased significantly and programming in the Scratch platform had significantly positive effects on the preservice IT teachers' attitudes regarding some items in the scale.},
author = {Yukselturk, Erman and Altiok, Serhat},
doi = {10.1111/bjet.12453},
file = {:Users/Mac/ownCloud/Mariuxi/TESIS{\_}ALICE/Marzo-2018/Revision 29 Art/Yukselturk{\_}2016 rev1.pdf:pdf},
issn = {14678535},
journal = {British Journal of Educational Technology},
number = {3},
pages = {789--801},
title = {{An investigation of the effects of programming with Scratch on the preservice IT teachers' self-efficacy perceptions and attitudes towards computer programming}},
volume = {48},
year = {2017}
}
@article{Woei2015,
abstract = {Teaching programming to the amateur programmers and non-programmers with design and educational technology background are tough. Needless to say, it is pertinent for them to have some basic programming skills. We realized the needs to motivate the potential programmers therefore, proposed the integration of folktales in learning programming. This paper shares an approach of teaching programming using the folktales to create awareness also to simulate the amateur and non-programmers interested with folktales at the same time motivated to complete a creation of digital story using 3D programming software, Alice and Unity. Mixed-methods approach revealed participants' positive behavior towards learning programming although it was perceived difficult. The finding also indicates that they can understand the programming language and successfully explored the software to create a digital story.},
author = {Woei, Ling Siew and Othman, Imran Hazimin and Man, Chuah Kee},
doi = {10.11113/jt.v75.5042},
file = {:Users/Mac/ownCloud/Mariuxi/TESIS{\_}ALICE/Marzo-2018/Revision 29 Art/Woei{\_}2015 rev1.pdf:pdf},
issn = {01279696},
journal = {Jurnal Teknologi},
keywords = {Alice,Digital story,Mixed-methods,Non-programmers,Unity},
number = {3},
pages = {47--53},
title = {{Learning programming using objects-first approach through folktales}},
volume = {75},
year = {2015}
}
@article{Webb2010,
abstract = {To evaluate the effectiveness of an instructional unit for game design and computer programming, we designed an authentic assessment with five troubleshooting scenarios. This assessment was completed by 24 middle grades students (age 12 - 14 years) after 10 hours of instruction using a visual programming environment. Students successfully completed most of the tasks in 45 minutes. Results from the Troubleshooting Assessment demonstrated that students developed sufficient fluency with programming to be able to apply their knowledge to new problems. These results suggest that troubleshooting scenarios can be used to assess student fluency in computer programming and computer-based problem solving. {\textcopyright} 2010 Published by Elsevier Ltd.},
author = {Webb, David C.},
doi = {10.1016/j.sbspro.2010.12.256},
file = {:Users/Mac/ownCloud/Mariuxi/TESIS{\_}ALICE/Marzo-2018/Revision 29 Art/Webb{\_}2010 Rev1.pdf:pdf},
isbn = {1303492709},
issn = {18770428},
journal = {Procedia - Social and Behavioral Sciences},
keywords = {Authentic assessment,Computational thinking,Computer programming,Game design,Problem solving,STEM education,Technology-based assessment},
pages = {903--907},
title = {{Troubleshooting assessment: An authentic problem solving activity for it education}},
url = {http://dx.doi.org/10.1016/j.sbspro.2010.12.256},
volume = {9},
year = {2010}
}
@article{Wang2012,
abstract = {Little is known about the effectiveness of automatic explanations in educational program visualization. We designed a study in which the order of animations and related explanations was manipulated. Two groups of a total of 18 participants interacted with either animation-first or explanationfirst version of a tool. The results indicate that animationfirst approach is significantly more effective. On the grounds of these findings and students' input about the explanation generation and layout, we discuss the design implications of the findings. Copyright 2012 ACM.},
author = {Wang, Peng and Bednarik, Roman and Moreno, Andr{\'{e}}s},
doi = {10.1145/2401796.2401808},
file = {:Users/Mac/ownCloud/Mariuxi/TESIS{\_}ALICE/Marzo-2018/Revision 29 Art/Wang{\_}2012 rev1.pdf:pdf},
isbn = {9781450317955},
journal = {Proceedings - 12th Koli Calling International Conference on Computing Education Research, Koli Calling 2012},
keywords = {Educational technologies,Jeliot 3,Learning programming,Program animation},
pages = {100--109},
title = {{During automatic program animation, explanations after animations have greater impact than before animations}},
year = {2012}
}
@article{Tuparov2014,
abstract = {In this paper we present our experience in the development and use of interactive simulation-based Learning Objects (LOs) in an introductory course of programming. The focus of our research is on the teaching of one of the important topics in introductory courses of programming - Sorting algorithms and their programming implementation. The characteristics of the LOs developed and the scenarios used for their deployment are described. The results from the pilot study, discussed in the paper, demonstrate an increase of student interest and a level of understanding of the learning content.},
author = {Tuparov, Georgi and Tuparova, Daniela and Jordanov, Vladimir},
doi = {10.1016/j.sbspro.2014.01.688},
file = {:Users/Mac/ownCloud/Mariuxi/TESIS{\_}ALICE/Marzo-2018/Revision 29 Art/Tuparov{\_}2014 rev1.pdf:pdf},
issn = {18770428},
journal = {Procedia - Social and Behavioral Sciences},
keywords = {computer based simulation,learning objects,sorting algorithms,teaching programming,teaching programming,sorting algorithms,computer based simulation,vizualisation,learning objects,vizualisation},
pages = {2962--2966},
publisher = {Elsevier B.V.},
title = {{Teaching Sorting and Searching Algorithms through Simulation-based Learning Objects in an Introductory Programming Course}},
url = {http://dx.doi.org/10.1016/j.sbspro.2014.01.688},
volume = {116},
year = {2014}
}
@article{Tanrikulu2011,
abstract = {The Scratch programming environment is widely known for its high accessibility for novice users, especially children. Recently it has also been adopted in introductory computer science courses in universities where first empirical results show that users with prior programming experience were less satisfied than others. In this paper we analyze this specific aspect by identifying difficulties that experienced programmers had with Scratch during a four-day workshop. The experiences of this particular user group suggest adding some standard integrated development environment features to Scratch. Beyond these results we argue that this obvious route might hide the real problem of discoverability of Scratch's features. {\textcopyright} 2011 Published by Elsevier Ltd.},
author = {Tanrikulu, Elif and Schaefer, Bj{\"{o}}rn Christian},
doi = {10.1016/j.sbspro.2011.11.140},
file = {:Users/Mac/ownCloud/Mariuxi/TESIS{\_}ALICE/Marzo-2018/Revision 29 Art/Tanrikulu{\_}2011 rev1.pdf:pdf},
issn = {18770428},
journal = {Procedia - Social and Behavioral Sciences},
keywords = {Scratch,Usability,Visual programming languages},
pages = {764--769},
publisher = {Elsevier B.V.},
title = {{The users who touched the ceiling of scratch}},
url = {http://dx.doi.org/10.1016/j.sbspro.2011.11.140},
volume = {28},
year = {2011}
}
@article{Saez-Lopez2016,
abstract = {Several authors and studies highlight the benefits of the integration of Computer Science into K-12 education. Applications such as Scratch have been demonstrated to be effective in educational environments. The aim of this study is to assess the use of a Visual Programming Language using Scratch in classroom practice, analyzing the outcomes and attitudes of 107 primary school students from 5th to 6th grade in five different schools in Spain. The intervention takes place in two academic years analyzing the practice of integrating coding and visual blocks programming in sciences and arts. The "Computational concepts and computational practices" dimension details a quasi-experimental approach, which showed significant improvement regarding learning programming concepts, logic, and computational practices with an active approach. The "Learning processes and coding in primary education" dimension analyzes the practice of the experimental group through questionnaires and structured observation. In this pedagogical design, students interact and create their own content related to curricular areas with several advantages, such as motivation, fun, commitment, and enthusiasm, showing improvements related to computational thinking and computational practices. Understanding of computational concepts through an active approach, Project Based Learning, usefulness, motivation, and commitment underline the importance and effectiveness of implementing a Visual Programming Language from active methodologies in primary education. Due to the aforementioned benefits and positive results obtained in this research, it is recommended to implement a Visual Programming Language in educational settings in 5th and 6th grade in primary education through a cross-curricular implementation.},
author = {S{\'{a}}ez-L{\'{o}}pez, Jos{\'{e}} Manuel and Rom{\'{a}}n-Gonz{\'{a}}lez, Marcos and V{\'{a}}zquez-Cano, Esteban},
doi = {10.1016/j.compedu.2016.03.003},
file = {:Users/Mac/ownCloud/Mariuxi/TESIS{\_}ALICE/Marzo-2018/Revision 29 Art/Saez{\_}2016 rev1.pdf:pdf},
issn = {03601315},
journal = {Computers and Education},
keywords = {Computational thinking,Elementary education,Improving classroom teaching,Programming and programming languages,Teaching/learning strategies},
pages = {129--141},
title = {{Visual programming languages integrated across the curriculum in elementary school: A two year case study using "scratch" in five schools}},
volume = {97},
year = {2016}
}
@article{Rozali2017,
abstract = {Learning programming is difficult especially for novice programmers. The rapid development of mobile technology capabilities generates a new way of teaching called mobile learning. Thus, the purpose of this research was to develop a mobile game on the topic ActionScript 2.0 based on the Problem Based Learning (PBL) approach. The development of this Android mobile application uses ADDIE model as the reference model and Adobe Flash CS6 as the programming software. The respondents were 10 postgraduate students enrolled in an Authoring System course, one of the compulsory courses for the Master of Educational Technology program at Universiti Teknologi Malaysia (UTM) where this study took place. The data analysis was conducted using the quantitative study approach and involved a motivational survey. The motivational survey comprising 16 items in the questionnaire adopted the ARCS Model of Motivation by [14]. This study found that through the implementation of PBL in the mobile game, students agreed that mobile games motivate them in learning programming, with mean value of 4.28 and standard deviation of 0.649.},
author = {Rozali, Nurul Faizah and Zaid, Norasykin Mohd},
doi = {10.1109/ICT-ISPC.2017.8075329},
file = {:Users/Mac/ownCloud/Mariuxi/TESIS{\_}ALICE/Marzo-2018/Revision 29 Art/Rozali{\_}2017 rev1.pdf:pdf},
isbn = {9781538629963},
journal = {6th ICT International Student Project Conference: Elevating Community Through ICT, ICT-ISPC 2017},
keywords = {ARCS Model,ActionScript,Android,Game,Mobile learning,PBL,Programming},
number = {December},
pages = {1--4},
title = {{Code puzzle: Actionscript 2.0 learning application based on problem based learning approach}},
volume = {2017-January},
year = {2017}
}
@article{Rogozhkina2011,
abstract = {In this paper, we present a new open source environment called PiktoMir (http://www.piktomir.ru/) that allows children to program a virtual robot behavior by using few pictograms. The goal of our research was to investigate the feasibility of using PiktoMir in teaching elements of programming to preschoolers. The obtained results allow us to assume that PiktoMir provides a working example of a natural textless environment that gradually introduces important programming concepts (such as subroutine, loop) without banging kids over heads. {\textcopyright} 2011 Published by Elsevier Ltd.},
author = {Rogozhkina, Irina and Kushnirenko, Anatoly},
doi = {10.1016/j.sbspro.2011.11.114},
file = {:Users/Mac/ownCloud/Mariuxi/TESIS{\_}ALICE/Marzo-2018/Revision 29 Art/Rogozhkina{\_}2011 rev1.pdf:pdf},
issn = {18770428},
journal = {Procedia - Social and Behavioral Sciences},
keywords = {Open source programming environment,Programming for kids},
pages = {601--605},
publisher = {Elsevier B.V.},
title = {{PiktoMir: Teaching programming concepts to preschoolers with anew tutorial environment}},
url = {http://dx.doi.org/10.1016/j.sbspro.2011.11.114},
volume = {28},
year = {2011}
}
@article{Reardon2014,
abstract = {This article describes how smartphones, studio-based learning, and extensive scaffolding were used in combination in the teaching of a freshman Introduction to Programming course. To reduce cognitive overload, a phased approach was followed in introducing programming concepts and development environments, beginning with the visual programming environment Scratch and culminating with Java development for Android smartphones. Studio-based learning, a pedagogical approach long established in the fields of architecture and design education, was used as the basis for a collaborative social constructivist-and constructionist-approach to learning. Smartphones offered students the potential to develop applications for a context that is both immediate and clearly relevant to the ways in which they utilize and interact with technology. The research was carried out over three full academic years and included 53 student participants. An exploratory case study methodology was used to investigate the efficacy of the approach in helping to overcome the barriers faced by novice programmers. The findings indicate that the approach has merit. The students were motivated and engaged by the learning experience and were able to develop sophisticated applications that incorporated images, sound, arrays, and event handling. There is evidence that aspects of the studio-based learning approach, such as the scope that it gave students to innovate and the open feedback during student presentations, provided a learning environment that was motivating. Overall, the combination of smartphones, studio-based learning, and appropriate scaffolding offers an effective way to teach introductory programming courses.},
author = {Reardon, Susan and Tangney, Brendan},
doi = {10.1145/2677089},
file = {:Users/Mac/ownCloud/Mariuxi/TESIS{\_}ALICE/Marzo-2018/Revision 29 Art/Reardon{\_}2014 rev1.pdf:pdf},
journal = {ACM Transactions on Computinig Education},
keywords = {Contextualized learning,Smartphones},
number = {4},
pages = {1--15},
title = {{Smartphones, studio-based learning, and scaffolding: Helping novices learn to program}},
volume = {14},
year = {2014}
}
@article{Rahman2018,
abstract = {Engaging underrepresented populations of women and minorities in Computer Science (CS) represents our greatest untapped resource for increasing the STEM workforce. In recent years, tremendous efforts have been geared towards developing learning materials to increase the interest of underrepresented students in CS. More recently, CS education researchers are beginning to recognize the need to apply the learning sciences to develop age- and grade-appropriate curricula and pedagogies for developing computing competencies among children. One effective approach to build learning competencies among young underrepresented students is through Collaborative Learning, which is an educational approach that involves groups of learners working together to solve a problem or create a product. Our goal, in this paper, is to report our experiences on designing and delivering a curriculum that teaches programming to middle school students using App Inventor through collaborative learning. Our curriculum is developed on the hypothesis that visual programming environment, in this case, App Inventor, present an alternative way of learning programming, which in the collaborative learning environment can enhance programming competencies and interests in underrepresented students. In this experience report, we will describe how we implemented this curriculum as a block course; present our lessons learned, and few findings from the evaluation.},
author = {Rahman, Farzana},
doi = {10.1145/3241815.3242586},
file = {:Users/Mac/ownCloud/Mariuxi/TESIS{\_}ALICE/Marzo-2018/Revision 29 Art/Rahman{\_}2018 rev1.pdf:pdf},
isbn = {9781450359542},
journal = {SIGITE 2018 - Proceedings of the 19th Annual SIG Conference on Information Technology Education},
keywords = {AppInventor,Collaborative learning,Programming fundamentals,Visual programming language},
pages = {172--177},
title = {{Leveraging visual programming language and collaborative learning to broaden participation in computer science}},
year = {2018}
}
@article{Agatolio2016,
author = {Agatolio, Francesca and Pivetti, Monica and Menegatti, Emanuele and Moro, Michele},
doi = {10.1007/978-3-319-55553-9},
file = {:Users/Mac/ownCloud/Mariuxi/TESIS{\_}ALICE/Marzo-2018/Revision 29 Art/Papadakis{\_}2017 rev1.pdf:pdf},
isbn = {9783319555539},
issn = {2194-5357},
journal = {Advances in Intelligent Systems and Computing},
keywords = {app inventor,lego mindstorms,programming,robotics},
pages = {43--57},
title = {{A training course in educational robotics for learning support teachers}},
volume = {560},
year = {2016}
}
@article{OrtegaGarcia2018,
abstract = {Working with specific m-learning apps is useful for learning/teaching purposes. However, its development requires advanced knowledge in programming mobile devices. We present a case study that evaluates the usefulness of App Inventor as a visual, blocks platform that allows teachers, without any advanced programming knowledge, to develop customized m-learning apps.},
author = {{Ortega Garc{\'{i}}a}, Antonio and Ruiz-Mart{\'{i}}nez, Antonio and Valencia-Garc{\'{i}}a, Rafael},
doi = {10.1002/cae.21895},
file = {:Users/Mac/ownCloud/Mariuxi/TESIS{\_}ALICE/Marzo-2018/Revision 29 Art/Ortega{\_}2017 rev1.pdf:pdf},
issn = {10990542},
journal = {Computer Applications in Engineering Education},
keywords = {blended learning,educational technology,educative app,mobile applications,mobile learning},
number = {3},
pages = {431--448},
title = {{Using App Inventor for creating apps to support m-learning experiences: A case study}},
volume = {26},
year = {2018}
}
@article{Nikou2014,
abstract = {Considering the declining enrolling in computing fields and the increasing demand in STEM disciplines, innovative methods should be employed to attract students in computing disciplines. MIT Scratch and App Inventor for Android visual programming environments are two such approaches. This is a comparative study to investigate any differences in the transition of students' motivation to learn programming using Scratch and App Inventor for Android in K-12 educational settings. Intrinsic goal orientation, task value, control of learning beliefs and self efficacy were found to be increased using these two entry-level learning programming environments from the beginning to the middle of the course. No effect on extrinsic motivation was found. Evaluating the transition in motivation throughout the whole course period for both environments (work in progress) will have an impact on educators to retain students' interest in programming and improve their attitudes towards computing. {\textcopyright} 2014 IEEE.},
author = {Nikou, Stavros A. and Economides, Anastasios A.},
doi = {10.1109/EDUCON.2014.6826234},
file = {:Users/Mac/ownCloud/Mariuxi/TESIS{\_}ALICE/Marzo-2018/Revision 29 Art/Nikou{\_}2014 rev1.pdf:pdf},
isbn = {9781479931910},
issn = {21659567},
journal = {IEEE Global Engineering Education Conference, EDUCON},
keywords = {AppInventor,Scratch,computer languages,computer science education,curriculum,motivation,programming},
number = {April},
pages = {1042--1045},
title = {{Transition in student motivation during a scratch and an app inventor course}},
year = {2014}
}
@article{Navarrete2013,
abstract = {In a case study on middle-school student educational game creation course in south central US state, the students' creative thinking process is investigated in order to understand perceptions of the digital design and programming involved in the game creation learning approach. Interviewing 12 students at with three different levels of game design experience, students in grade 6, 7 and 8, with 1, 2, and 3 years of game design experience respectively, findings suggest that students enjoyed the learning approach as satisfying and engaging, yet technologically challenging. The students experienced positive opportunities for engaging the creative thinking process in synthesizing social issue information for constructing their understanding through the creation of interactive, educational digital games. Findings suggest that the creative thinking process in student-centered game creation learning approach may provide learners a rich and enjoyable learning experience with the authentic technology use as well as provide for deep, insightful learning. {\textcopyright} 2013 Elsevier Ltd. All rights reserved.},
author = {Navarrete, Cesar C.},
doi = {10.1016/j.compedu.2013.07.025},
file = {:Users/Mac/ownCloud/Mariuxi/TESIS{\_}ALICE/Marzo-2018/Revision 29 Art/Navarrete{\_}2013 rev1.pdf:pdf},
issn = {03601315},
journal = {Computers and Education},
keywords = {Creative thinking,Curriculum,Game design,Programming,Technology},
pages = {320--331},
publisher = {Elsevier Ltd},
title = {{Creative thinking in digital game design and development: A case study}},
url = {http://dx.doi.org/10.1016/j.compedu.2013.07.025},
volume = {69},
year = {2013}
}
@article{Merkouris2017,
abstract = {Pedagogy has emphasized that physical representations and tangible interactive objects benefit learning especially for young students. There are many tangible hardware platforms for introducing computer programming to children, but there is limited comparative evaluation of them in the context of a formal classroom. In this work, we explore the benefits of learning to code for tangible computers, such as robots and wearable computers, in comparison to programming for the desktop computer. For this purpose, 36 students participated in a within-groups study that involved three types of target computer platform tangibility: (1) desktop, (2) wearable, and (3) robotic. We employed similar blocks-based visual programming environments, and we measured emotional engagement, attitudes, and computer programming performance. We found that students were more engaged by and had a higher intention of learning programming with the robotic rather than the desktop computer. Furthermore, tangible computing platforms, either robot or wearable, did not affect the students' performance in learning basic computational concepts (e.g., sequence, repeat, and decision). Our findings suggest that computer programming should be introduced through multiple target platforms (e.g., robots, smartphones, wearables) to engage children.},
author = {Merkouris, Alexandros and Chorianopoulos, Konstantinos and Kameas, Achilles},
doi = {10.1145/3025013},
file = {:Users/Mac/ownCloud/Mariuxi/TESIS{\_}ALICE/Marzo-2018/Revision 29 Art/Merkouris{\_}2017 rev1.pdf:pdf},
issn = {19466226},
journal = {ACM Transactions on Computing Education},
keywords = {Children,Embodiment,Experiment,Learning,Robot,Ubiquitous computing,Wearable},
number = {2},
title = {{Teaching programming in secondary education through embodied computing platforms: Robotics and wearables}},
volume = {17},
year = {2017}
}
@article{Merkouris2015,
abstract = {Learning to program in computer code has been considered one of the pillars of contemporary education with benefits that reach well beyond the skills required by the computing industry, into creativity and self-expression. Nevertheless, the execution of computer programs usually takes place on a traditional desktop computer, which has a limited repertoire of input and output interfaces to engage with the user. On the other hand, pedagogy has emphasized that physical representations and tangible interactive objects benefit learning especially for young students. In this work, we explore the benefits of learning to code for ubiquitous computers, such as robots and wearable computers, in comparison to programming for the desktop computer. For this purpose, thirty-six students participated in a within groups study that involved three types of tangibility at the target computer platform: 1) desktop with Scratch, 2) wearable with Arduino LilyPad, and 3) robotic with Lego Mindstorms. Regardless of the target platform, we employed the same desktop visual programming environment (MIT Scratch, Modkit and Enchanting) and we measured emotional engagement and assessed students' programming skills. We found that students expressed more positive emotions while programming with the robotic rather than the desktop computer. Furthermore, tangible computing platforms didn't affect dramatically students' performance in computational thinking.},
author = {Merkouris, Alexandros and Chorianopoulos, Konstantinos},
doi = {10.1145/2818314.2818342},
file = {:Users/Mac/ownCloud/Mariuxi/TESIS{\_}ALICE/Marzo-2018/Revision 29 Art/Merkouris{\_}2015 rev1.pdf:pdf},
isbn = {9781450337533},
journal = {ACM International Conference Proceeding Series},
keywords = {Children,Embodiment,Experiment,Learning,Robot,Ubiquitous computing,Wearable},
pages = {69--72},
title = {{Introducing computer programming to children through robotic and wearable devices}},
volume = {09-11-November-2015},
year = {2015}
}
@article{Lee2015,
abstract = {People are increasingly turning to online resources to learn to code. However, despite their prevalence, it is still unclear how successful these resources are at teaching CS1 programming concepts. Using a pretest-posttest study design, we measured the performance of 60 novices before and after they used one of the following, randomly assigned learning activities: 1) complete a Python course on a website called Codecademy, 2) play through and finish a debugging game called Gidget, or 3) use Gidget's puzzle designer to write programs from scratch. The pre- and posttest exams consisted of 24 multiple choice questions that were selected and validated based on data from 1,494 crowdsourced respondents. All 60 of our novices across the three conditions did poorly on the exams overall in both the pre-tests and post-tests (e.g., the best median post-test score was 50{\%} correct). However, those completing the Codecademy course and those playing through the Gidget game showed over a 100{\%} increase in correct answers when comparing their post-test exam scores to their pretest exam scores. Those playing Gidget, however, achieved these same learning gains in half the time. This was in contrast to novices that used the puzzle designer, who did not show any measurable learning gains. All participants performed similarly within their own conditions, regardless of gender, age, or education. These findings suggest that discretionary online educational technologies can successfully teach novices introductory programming concepts (to a degree) within a few hours when explicitly guided by a curriculum.},
author = {Lee, Michael J. and Ko, Andrew J.},
doi = {10.1145/2787622.2787709},
file = {:Users/Mac/ownCloud/Mariuxi/TESIS{\_}ALICE/Marzo-2018/Revision 29 Art/Lee{\_}2015 rev1.pdf:pdf},
isbn = {9781450336284},
journal = {ICER 2015 - Proceedings of the 2015 ACM Conference on International Computing Education Research},
keywords = {Codecademy,Computing education,Debugging,Educational game,Gidget,Learning outcomes,Programming},
pages = {237--246},
title = {{Comparing the effectiveness of online learning approaches on CS1 learning outcomes}},
year = {2015}
}
@article{Kordaki2010,
abstract = {This paper presents both the design and the pilot formative evaluation study of a computer-based problem-solving environment (named LECGO: Learning Environment for programming using C using Geometrical Objects) for the learning of computer programming using C by beginners. In its design, constructivist and social learning theories were taken into account. The general design has taken into consideration models of the learning process and subject matter as well as potential learner behaviour in dealing with fundamental tasks. The main emphasis has been placed on the role of: (a) multiple external representations in student learning, (b) motivation, through performing problem-solving activities taken from the familiar and meaningful context of drawing, using simple geometrical objects, (c) the active participation of students in their own learning by using hands-on experience, (d) appropriate feedback on the actions taken by students, to aid their self-correction, and (e) holistic, activity-based, multi-media, multi-representational and multi-layered content for the learning of basic concepts of programming using C. LECGO was pilot evaluated in the field through a qualitative and comparative study where nine 12th grade (18-year-old) students participated. In fact, students faced three similar yet not identical sets of four tasks across three learning environments, namely; paper and pencil (p-p), Turbo C and LECGO. The data emerging from this field evaluation study indicates that students gain better results within LECGO than in both the p-p environment and the typical programming environment of Turbo C, while performing similar activities. {\textcopyright} 2009 Elsevier Ltd. All rights reserved.},
author = {Kordaki, Maria},
doi = {10.1016/j.compedu.2009.07.012},
file = {:Users/Mac/ownCloud/Mariuxi/TESIS{\_}ALICE/Marzo-2018/Revision 29 Art/Kordaki{\_}2010 rev1.pdf:pdf},
issn = {03601315},
journal = {Computers and Education},
keywords = {C,Interactive learning environments,Multiple representation systems,Programming,Secondary education},
number = {1},
pages = {69--87},
publisher = {Elsevier Ltd},
title = {{A drawing and multi-representational computer environment for beginners' learning of programming using C: Design and pilot formative evaluation}},
url = {http://dx.doi.org/10.1016/j.compedu.2009.07.012},
volume = {54},
year = {2010}
}
@article{Kafai2015,
abstract = {Most research on game making activities for learning has focused on programming screen-based designs. Only recently has research begun to include the design of tangible interfaces; connecting on-screen programming with hands-on crafting. In this paper, we examine the potential of a workshop that combines the high and low of technology with game design in which teams of high school youth crafted, coded and collaborated on their own augmented board games to highlight intersections between learning programming and making, and creating across digital and tangible modalities. We focused our analysis of students' projects, interactions, and reflections on how young designers conceptualized the integration of screen and board game elements, realized computational concepts and practices in their board game designs and augmentations, and reflected on their game design experience connecting crafting and coding. In the discussion, we review how the expansion of game making activities can create new opportunities for interaction design and research. Copyright is held by the owner/author(s).},
author = {Kafai, Yasmin and Vasudevan, Veena},
doi = {10.1145/2771839.2771853},
file = {:Users/Mac/ownCloud/Mariuxi/TESIS{\_}ALICE/Marzo-2018/Revision 29 Art/Kafai{\_}2015 rev1.pdf:pdf},
isbn = {9781450335904},
journal = {Proceedings of IDC 2015: The 14th International Conference on Interaction Design and Children},
keywords = {Board games,Game design,MaKey MaKey,Maker activities,Scratch},
pages = {130--139},
title = {{Hi-Lo tech games: Crafting, coding and collaboration of augmented board games by high school youth}},
year = {2015}
}
@article{Huch2007,
abstract = {This paper presents an interactive framework for pupils to learn the basic concepts of programming by means of the functional programming language Erlang. Beside the idea of the framework we also sketch the different learning targets and exercises to deepen programming skills. The framework was successfully utilized in a programming course for pupils in their last three school years. Copyright {\textcopyright} 2007 ACM.},
author = {Huch, Frank},
doi = {10.1145/1292520.1292534},
file = {:Users/Mac/ownCloud/Mariuxi/TESIS{\_}ALICE/Marzo-2018/Revision 29 Art/Huch{\_}2007 rev1.pdf:pdf},
isbn = {9781595936752},
journal = {Erlang'07: Proceedings of the 2007 SIGPLAN Erlang Workshop},
keywords = {Education,Erlang,Kara,Programming},
pages = {93--99},
title = {{Learning programming with erlang: Or learning erlang with ladybirds}},
year = {2007}
}
@article{Horvath2014,
abstract = {Proposed paper reports a project of dissertation thesis realized at Faculty of Education of Trnava University in Trnava (Slovak Republic). Research project of dissertation thesis is oriented towards a problem of didactics of education of programming at university, concretely by application of new teaching procedures in scope of introductory courses of programming in study field Teaching of Academic Subjects of programme combinations including Computer Science as one of subject. It concerns with application of new-developed class groups for Java, which is a part of micro-environment implementation, applying inter alia principles of Turtle graphics, well-known from programming language Logo. Problem of programming is for most of admitted students unknown at all. That causes their disorientation and involves teaching of essential fundaments required. That is a purpose of new procedure formation in scope of teaching of introductory courses of programming. Class groups of graphical robot aim to joint future-teacher of Computer Science preparation for programming by usage of graphical Logo principles with teaching of Java programming together. In research Design-Based Research as qualitative research method is used. In paper we describe prime phase of dissertation project (phase of analysis) and interpret findings and recommendations for following project phases, aimed to propose an innovative method applied within introductory courses of programming, to develop adequate device for its realization and to reflect their relevance. Outcome thesis will partially support Education Sciences development.},
author = {Horv{\'{a}}th, Roman and Javorsk{\'{y}}, Stanislav},
doi = {10.1016/j.sbspro.2014.01.1098},
file = {:Users/Mac/ownCloud/Mariuxi/TESIS{\_}ALICE/Marzo-2018/Revision 29 Art/Horvath{\_}2014 rev1.pdf:pdf},
issn = {18770428},
journal = {Procedia - Social and Behavioral Sciences},
keywords = {graphical robot,introductory programming,motivation,teaching change},
pages = {5188--5193},
publisher = {Elsevier B.V.},
title = {{New Teaching Model for Java Programming Subjects}},
url = {http://dx.doi.org/10.1016/j.sbspro.2014.01.1098},
volume = {116},
year = {2014}
}
@article{Feng2017,
abstract = {For decades, computing speeds seemingly doubled every 24 months by increasing the processor clock speed, thus giving software a “free ride” to better performance. This free ride, however, effectively ended by the mid-2000s. With clock speeds having plateaued and computational horsepower instead increasing due to increasing the number of cores per processor, the vision for parallel computing, which started more than 40 years ago, is a revolution that has now (ubiquitously) arrived. In addition to traditional supercomputing clusters, parallel computing with multiple cores can be found in desktops, laptops, and even mobile smartphones. This ubiquitous parallelism in hardware presents a major challenge: the difficulty in easily extracting parallel performance via current software abstractions. Consequently, this paper presents an approach that reduces the learning curve to parallel programming by introducing such concepts into a visual (but currently sequential) programming language called Snap!, which was inspired by MIT's Scratch project. Furthermore, our proposed visual abstractions can automatically generate parallel code for the end user to run in parallel on a variety of platforms from personal computing devices to supercomputers. Ultimately, this work seeks to increase parallel programming literacy so that users, whether novice or experienced, may leverage a world of ubiquitous parallelism to enhance productivity in all walks of life, including the sciences, engineering, commerce, and liberal arts.},
author = {Feng, Annette and Gardner, Mark and chun Feng, Wu},
doi = {10.1016/j.jpdc.2017.01.018},
file = {:Users/Mac/ownCloud/Mariuxi/TESIS{\_}ALICE/Marzo-2018/Revision 29 Art/Feng{\_}2017 rev1.pdf:pdf},
issn = {07437315},
journal = {Journal of Parallel and Distributed Computing},
keywords = {Block-based programming,Computer science education,Explicit parallel computing,Languages for PDC and HPC,Parallel computational patterns,Pedagogical tools,Programming environments,Visual programming},
pages = {150--162},
publisher = {Elsevier Inc.},
title = {{Parallel programming with pictures is a Snap!}},
volume = {105},
year = {2017}
}
@article{Feng2014,
abstract = {The purpose of this study was to investigate the influence of goal specificity and scaffolding on the programming performance and self-regulation of elementary students engaged in learning game design. This study recruited 232 students for the experimental activities. Two levels of goal specificity were employed: specific and nonspecific. Structuring and problematizing scaffolds were also used to support students in the process of learning. Our results reveal the following: (1) nonspecific goals and structuring scaffolds led to superior comprehension of programming, (2) nonspecific goals with problematizing scaffolds led to better problem-solving performance, (3) problematizing scaffolds were more effective than structuring scaffolds in the development of self-regulation behavior, and (4) nonspecific goals were more effective than specific goals in the promotion of resource management associated with self-regulation. {\textcopyright} 2013 British Educational Research Association.},
author = {Feng, Chia Yen and Chen, Ming Puu},
doi = {10.1111/bjet.12022},
file = {:Users/Mac/ownCloud/Mariuxi/TESIS{\_}ALICE/Marzo-2018/Revision 29 Art/Feng{\_}2014 rev1.pdf:pdf},
issn = {00071013},
journal = {British Journal of Educational Technology},
number = {2},
pages = {285--302},
title = {{The effects of goal specificity and scaffolding on programming performance and self-regulation in game design}},
volume = {45},
year = {2014}
}
@article{Esteves2011,
abstract = {The emergence of new technologies such as three-dimensional virtual worlds brings new opportunities for teaching and learning. We conducted an action research approach to the analysis of how teaching and learning of computer programming at the university level could be developed within the Second Life virtual world. Results support the notion that it is possible to use this environment for better effectiveness in the learning of programming. The main results are the identification of problems hampering the teacher's intervention in this virtual world and the detection of solutions for those problems that were found effective to the success in using this environment for teaching/learning computer programming. British Journal of Educational Technology {\textcopyright} 2010 Becta.},
author = {Esteves, Micaela and Fonseca, Benjamim and Morgado, Leonel and Martins, Paulo},
doi = {10.1111/j.1467-8535.2010.01056.x},
file = {:Users/Mac/ownCloud/Mariuxi/TESIS{\_}ALICE/Marzo-2018/Revision 29 Art/Esteves{\_}2011 rev1.pdf:pdf},
issn = {00071013},
journal = {British Journal of Educational Technology},
number = {4},
pages = {624--637},
title = {{Improving teaching and learning of computer programming through the use of the Second Life virtual world}},
volume = {42},
year = {2011}
}
@article{Chao2016,
abstract = {This study aims to advocate that a visual programming environment offering graphical items and states of a computational problem could be helpful in supporting programming learning with computational problem-solving. A visual problem-solving environment for programming learning was developed, and 158 college students were conducted in a computational problem-solving activity. The students' activities of designing, composing, and testing solutions were recorded by log data for later analysis. To initially unveil the students' practice and strategies exhibited in the visual problem-solving environment, this study proposed several indicators to quantitatively represent students' computational practice (Sequence, Selection, Simple iteration, Nested iteration, and Testing), computational design (Problem decomposition, Abutment composition, and Nesting composition), and computational performance (Goal attainment and Program size). By the method of cluster analysis, some empirical patterns regarding the students' programming learning with computational problem-solving were identified. Furthermore, comparisons of computational design and computational performance among the different patterns of computational practice were conducted. Considering the relations of students' computational practice to computational design and performance, evidence-based suggestions on the design of supportive programming environments for novice programmers are discussed.},
author = {Chao, Po Yao},
doi = {10.1016/j.compedu.2016.01.010},
file = {:Users/Mac/ownCloud/Mariuxi/TESIS{\_}ALICE/Marzo-2018/Revision 29 Art/Chao{\_}2016 rev1.pdf:pdf},
issn = {03601315},
journal = {Computers and Education},
keywords = {Computer programming,Students programming patterns,Visual problem solving},
pages = {202--215},
publisher = {Elsevier Ltd},
title = {{Exploring students' computational practice, design and performance of problem-solving through a visual programming environment}},
volume = {95},
year = {2016}
}
@article{Ben-Ari2011,
abstract = {Jeliot is a program animation system for teaching and learning elementary programming that has been developed over the past decade, building on the Eliot animation system developed several years before. Extensive pedagogical research has been done on various aspects of the use of Jeliot including improvements in learning, effects on attention, and acceptance by teachers. This paper surveys this research and development, and summarizes the experience and the lessons learned. {\textcopyright} 2011 Elsevier Ltd.},
author = {Ben-Ari, Mordechai and Bednarik, Roman and {Ben-Bassat Levy}, Ronit and Ebel, Gil and Moreno, Andr{\'{e}}s and Myller, Niko and Sutinen, Erkki},
doi = {10.1016/j.jvlc.2011.04.004},
file = {:Users/Mac/ownCloud/Mariuxi/TESIS{\_}ALICE/Marzo-2018/Revision 29 Art/Ben-Ari{\_}2011 rev1.pdf:pdf},
issn = {1045926X},
journal = {Journal of Visual Languages and Computing},
keywords = {Attention,Conflictive animation,Eye tracking,Jeliot,Phenomenography,Program animation,Program visualization,Software visualization},
number = {5},
pages = {375--384},
title = {{A decade of research and development on program animation: The Jeliot experience}},
volume = {22},
year = {2011}
}
@article{Alshaigy2015,
abstract = {This paper describes a planned investigation into how learning styles and pedagogical methodologies can be embedded into an e-learning tool to assist students' learning programming. The objective of the research is to test the hypothesis that combining multiple teaching methods to accommodate different learners' preferences will significantly improve comprehension of concepts, which in turn increases students' confidence and as a consequence performance in programming. An interactive learning tool to teach Python programming language to students, called PILeT, has been developed to test the hypothesis. The tool aims to be adaptable to the students' learning style and as such it will teach programming using several techniques (e.g. visual, textual, puzzles) to appeal to each preference. PILeT is suitable for secondary school students or teachers wishing to undertake CPD (Continuing Professional Development). PILeT will be tested on first yea.},
author = {Alshaigy, Bedour and Kamal, Samia and Mitchell, Faye and Martin, Clare and Aldea, Arantza},
doi = {10.1145/2818314.2818319},
file = {:Users/Mac/ownCloud/Mariuxi/TESIS{\_}ALICE/Marzo-2018/Revision 29 Art/Alshaigy{\_}2015rev.pdf:pdf},
isbn = {9781450337533},
journal = {ACM International Conference Proceeding Series},
keywords = {Computer science education,E-learning tools,Introductory programming},
number = {Figure 1},
pages = {76--79},
title = {{PILeT: An interactive learning tool to teach python}},
volume = {09-11-November-2015},
year = {2015}
}
@article{Yoon2016529,
abstract = {An educational programming language (EPL) allows a novice programmer to program quickly and easily by reducing the difficulty of programming in terms of programming education. The selection of a programming language, considering the students' cognitive level and the purpose of learning programming, is regarded as a key factor to increase the effectiveness of programming education. In this study, we derived the EPL selection criteria for pre-introductory computer science using the Delphi method of a 20-expert panels. Also, we selected RUR-PLE, a Python based programming learning environment, based on EPL selection criteria chosen through the Delphi method and applied the selected EPL to 26 students (20 males and 6 females) who participate in programming class to verify its usability. The objective of this study is to improve the possibility of selecting an appropriate EPL for novice programmers, considering the students' characteristics and the transition of programming knowledge from the EPL to a general-purpose programming language. {\^{A}}{\textcopyright} 2016, Springer Science+Business Media New York.},
annote = {cited By 0

Estudio para seleccionar un lenguaje de programacion},
author = {Yoon, I K and Kim, J M and Lee, W G},
doi = {10.1007/s10586-016-0540-6},
file = {:Users/Mac/Library/Application Support/Mendeley Desktop/Downloaded/Yoon, Kim, Lee - 2016 - The analysis and application of an educational programming language (RUR-PLE) for a pre-introductory computer sc.pdf:pdf},
journal = {Cluster Computing},
number = {1},
pages = {529--546},
title = {{The analysis and application of an educational programming language (RUR-PLE) for a pre-introductory computer science course}},
url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84961923984{\&}doi=10.1007{\%}2Fs10586-016-0540-6{\&}partnerID=40{\&}md5=28c8bdeccd6b1bb4a8efda4c9f881661},
volume = {19},
year = {2016}
}
